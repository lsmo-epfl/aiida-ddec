[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.module]
name = "aiida_ddec"

[project]
name = "aiida-ddec"
dynamic = ["version"]
authors = [
    { name = "Aliaksandr Yakutovich", email = "aliaksandr.yakutovich@epfl.ch" },
]
description = "AiiDA plugin for DDEC code"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 2.7",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Framework :: AiiDA",
    "Development Status :: 5 - Production/Stable",
]
dependencies = [
    "aiida-core>=1.1.0,<3",
    "six",
    "voluptuous",
]

[project.license]
text = "MIT License"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/lsmo-epfl/aiida-ddec"

[project.entry-points."aiida.calculations"]
ddec = "aiida_ddec.calculations:DdecCalculation"

[project.entry-points."aiida.parsers"]
ddec = "aiida_ddec.parsers:DdecParser"

[project.entry-points."aiida.workflows"]
"ddec.cp2k_ddec" = "aiida_ddec.workchains:Cp2kDdecWorkChain"

[project.optional-dependencies]
cp2k = [
    "aiida-cp2k>=1.0.0",
]
pre-commit = [
    "pre-commit~=2.2",
    "pylint~=2.6.0",
]
testing = [
    "pgtest~=1.3.1",
    "aiida-testing-dev==0.1.0.dev1",
    "pytest-cov~=2.7",
    "pytest~=6.0",
]


[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "import-outside-toplevel",
    "duplicate-code",
]


[tool.pytest.ini_options]
addopts = "--durations=0 --cov=aiida_ddec"
testpaths = [
    "tests",
    "examples",
]
# test also examples
python_functions = "test_* run_*"
python_files = "test_*.py"

filterwarnings = [
    "ignore::DeprecationWarning:frozendict:",
    "ignore::DeprecationWarning:sqlalchemy_utils:",
    "ignore::DeprecationWarning:reentry:",
    "ignore::DeprecationWarning:babel:",
]


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38
isolated_build = true
[testenv:py{38,39,310,311}]
extras = testing
commands_pre = reentry scan -r aiida
commands = pytest {posargs}
"""